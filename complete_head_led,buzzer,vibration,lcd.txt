import os
import cv2
import numpy as np
import dlib
from imutils import face_utils
import RPi.GPIO as GPIO
import time
import json
import paho.mqtt.client as mqtt
from smbus2 import SMBus
from RPLCD.i2c import CharLCD

# Set Qt platform to avoid OpenCV errors
os.environ["QT_QPA_PLATFORM"] = "xcb"

# Disable GPIO warnings
GPIO.setwarnings(False)

# Define GPIO pins
LED_PIN = 23
BUZZER_PIN = 24
VIBRATION_PIN = 25

# Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(VIBRATION_PIN, GPIO.OUT)

# Initialize LCD (I2C Address: 0x27)
lcd = CharLCD('PCF8574', 0x27)

def lcd_display(message):
    """Display message on I2C LCD"""
    lcd.clear()
    lcd.write_string(message)

# Initialize camera and face detection
cap = cv2.VideoCapture(0)
hog_face_detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("/home/pi/Downloads/drowsinessDetector-master/shape_predictor_68_face_landmarks.dat")

# MQTT Configuration
MQTT_BROKER = "localhost"
MQTT_PORT = 1883
MQTT_TOPIC = "status"

mqtt_client = mqtt.Client()

def connect_mqtt():
    try:
        mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
        print("Connected to MQTT Broker!")
    except Exception as e:
        print(f"Failed to connect to MQTT Broker: {e}")

def publish_status(status, led_state, buzzer_state, vibration_state):
    payload = {
        "status": status,
        "led": led_state,
        "buzzer": buzzer_state,
        "vibration": vibration_state,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    }
    json_payload = json.dumps(payload)
    print(f"Publishing: {json_payload}")
    try:
        mqtt_client.publish(MQTT_TOPIC, json_payload)
    except Exception as e:
        print(f"Failed to publish status: {e}")

connect_mqtt()

# State variables
sleep, drowsy, active = 0, 0, 0

def compute(ptA, ptB):
    return np.linalg.norm(ptA - ptB)

def blinked(a, b, c, d, e, f):
    up = compute(b, d) + compute(c, e)
    down = compute(a, f)
    ratio = up / (2.0 * down)
    return 2 if ratio > 0.25 else 1 if 0.21 < ratio <= 0.25 else 0

def control_alerts(state):
    if state == "SLEEPING !!!" or state == "DROWSY !":
        GPIO.output(LED_PIN, GPIO.HIGH)
        GPIO.output(BUZZER_PIN, GPIO.HIGH)
        GPIO.output(VIBRATION_PIN, GPIO.HIGH)
        return "ON", "ON", "ON"
    else:
        GPIO.output(LED_PIN, GPIO.LOW)
        GPIO.output(BUZZER_PIN, GPIO.LOW)
        GPIO.output(VIBRATION_PIN, GPIO.LOW)
        return "OFF", "OFF", "OFF"

try:
    while True:
        _, frame = cap.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = hog_face_detector(gray)

        status = "UNKNOWN"

        for face in faces:
            landmarks = predictor(gray, face)
            landmarks = face_utils.shape_to_np(landmarks)

            # **Draw bounding box around face**
            x, y, w, h = face.left(), face.top(), face.width(), face.height()
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # **Draw facial landmarks**
            for (x, y) in landmarks:
                cv2.circle(frame, (x, y), 1, (255, 0, 0), -1)

            left_blink = blinked(*landmarks[36:42])
            right_blink = blinked(*landmarks[42:48])

            if left_blink == 0 or right_blink == 0:
                sleep += 1
                drowsy = 0
                active = 0
                if sleep > 5:  # Reduce the threshold for better response
                    status = "SLEEPING !!!"
                    led_state, buzzer_state, vibration_state = control_alerts(status)
                    publish_status(status, led_state, buzzer_state, vibration_state)
                    lcd_display(status)
            elif left_blink == 1 or right_blink == 1:
                sleep = 0
                active = 0
                drowsy += 1
                if drowsy > 5:  # Adjust threshold for drowsiness detection
                    status = "DROWSY !"
                    led_state, buzzer_state, vibration_state = control_alerts(status)
                    publish_status(status, led_state, buzzer_state, vibration_state)
                    lcd_display(status)
            else:
                sleep = 0
                drowsy = 0
                active += 1
                if active > 5:  # Ensure it detects active state only if truly awake
                    status = "ACTIVE :)"
                    led_state, buzzer_state, vibration_state = control_alerts(status)
                    publish_status(status, led_state, buzzer_state, vibration_state)
                    lcd_display(status)

        cv2.putText(frame, status, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow("Drowsiness Detection", frame)

        if cv2.waitKey(1) == 27:
            break

except KeyboardInterrupt:
    print("Interrupted. Exiting...")

finally:
    cap.release()
    cv2.destroyAllWindows()
    GPIO.cleanup()
    mqtt_client.disconnect()
